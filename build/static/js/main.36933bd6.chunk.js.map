{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","type","id","text","value","onChange","event","setUpdate","target","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItems","this","setState","Date","now","preventDefault","newItem","newitems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,gLC6B5BC,MA1Bf,SAAmBC,GAEf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC3B,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKK,KACTC,MAAON,EAAKK,KACZE,SAAa,SAACC,GAAWZ,EAAMa,UAAUD,EAAME,OAAOJ,MAAMN,EAAKE,QAErE,8BACI,uBAAGD,UAAU,mBACbU,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAKE,cAS9D,OACI,6BAAML,ICyDCgB,E,kDA9Eb,WAAYjB,GACX,IAAD,8BACE,cAAMA,IACDkB,MAAM,CACThB,MAAM,GACNiB,YAAY,CACVV,KAAK,GACLH,IAAI,KAGR,EAAKc,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,SAAS,EAAKA,SAASD,KAAd,gBACd,EAAKL,WAAW,EAAKA,WAAWK,KAAhB,gBAChB,EAAKR,UAAU,EAAKA,UAAUQ,KAAf,gBAZjB,E,wDAcYT,GACVW,KAAKC,SAAS,CACZL,YAAY,CACVV,KAAOG,EAAME,OAAOJ,MACpBJ,IAAImB,KAAKC,W,+BAINd,GAEPA,EAAMe,iBACN,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAmB,KAAhBS,EAAQnB,KACX,CACE,IAAMoB,EAAQ,sBAAON,KAAKL,MAAMhB,OAAlB,CAAwB0B,IACtCL,KAAKC,SAAS,CACZtB,MAAQ2B,EACRV,YAAY,CACVV,KAAK,GACLH,IAAI,S,iCAKDA,GAET,IAAMwB,EAAgBP,KAAKL,MAAMhB,MAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAMA,KACjEiB,KAAKC,SAAS,CACZtB,MAAM4B,M,gCAIArB,EAAMH,GAEd,IAAMJ,EAAQqB,KAAKL,MAAMhB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IAEZF,EAAKK,KAAKA,MAGdc,KAAKC,SAAS,CACZtB,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,gCACA,0BAAMG,GAAG,aAAawB,SAAUT,KAAKD,UACnC,2BAAOf,KAAK,OAAO0B,YAAY,uBAAuBvB,MAAOa,KAAKL,MAAMC,YAAYV,KAAME,SAAUY,KAAKH,cACzG,4BAAQb,KAAK,UAAb,QAEF,kBAAC,EAAD,CAAWL,MAAQqB,KAAKL,MAAMhB,MAC9Bc,WAAcO,KAAKP,WACnBH,UAAaU,KAAKV,kB,GAvERqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36933bd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\n\r\nfunction ListItems(props)\r\n{\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n    {\r\n        return <div className=\"list\" key={item.key}>\r\n                    <p>\r\n                        <input type=\"text\"\r\n                            id={item.text}\r\n                            value={item.text}\r\n                            onChange = { (event) => {props.setUpdate(event.target.value,item.key)}}\r\n                        />\r\n                        <span>\r\n                            <i className=\"far fa-trash-alt\" \r\n                            onClick={ () => props.deleteItem(item.key)}></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n       \r\n    });\r\n\r\n    \r\n\r\n    return(\r\n        <div>{listItems}</div>)\r\n}\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\n\nclass App extends React.Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.handleInput=this.handleInput.bind(this);\n    this.addItems=this.addItems.bind(this);\n    this.deleteItem=this.deleteItem.bind(this);\n    this.setUpdate=this.setUpdate.bind(this);\n  }\n  handleInput(event){\n    this.setState({\n      currentItem:{\n        text : event.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItems(event)\n  {\n    event.preventDefault();//this will prevernt buttion from refreshing the page.\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\")\n    {\n      const newitems = [...this.state.items,newItem];//destructuring\n      this.setState({\n        items : newitems,\n        currentItem:{\n          text:\"\",\n          key:''\n        }\n      })\n    }\n  }\n  deleteItem(key)\n  {\n    const filteredItems = this.state.items.filter(item => item.key!==key);\n    this.setState({\n      items:filteredItems\n    })\n\n  }\n  setUpdate(text, key)\n  {\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key===key)\n      {\n        item.text=text;\n      }\n    })\n    this.setState({\n      items :items\n    })\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <header>\n        <form id=\"to-do-form\" onSubmit={this.addItems}>\n          <input type=\"text\" placeholder=\"Enter your task here\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n          <button type=\"submit\">Add</button>\n        </form>\n        <ListItems items ={this.state.items}\n        deleteItem = {this.deleteItem}\n        setUpdate = {this.setUpdate}></ListItems>\n      </header>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}